apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    defaultConfig {
        applicationId "com.baidu.idl.face.demo"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 8
        versionName "8.0.3"
        multiDexEnabled true

        /*ndk {
            // 设置支持的 SO 库构架 (qrcode)
            abiFilters 'armeabi-v7a'//, 'arm64-v8a'
        }*/
        ndk {
            moduleName "facesdk"
            ldLibs "log"
            abiFilters "arm64-v8a"// "armeabi", "x86", "arm64-v8a",armeabi-v7a
        }


        /*ndk{
            moduleName "libwiegand"
            ldLibs "log"
            abiFilters "armeabi-v7a"
        }*/
    }
    signingConfigs {
        debug {
            storeFile file("signature/facesdk-library.keystore")
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file("signature/facesdk-library.keystore")
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
            debuggable true
            jniDebuggable true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            debuggable false
            jniDebuggable false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    //从普通Java代码转kotlin后，运行可能出现的错误：Error: Program type already present: org.intellij.lang.annotations.JdkConstants$PatternFlags
    configurations {
        cleanedAnnotations
        compile.exclude group: 'org.jetbrains', module: 'annotations'
    }

    externalNativeBuild {
        ndkBuild {
            path 'src/main/jni/Android.mk'
        }
    }

    packagingOptions {
        // .so都选择第一个
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'

    }
}

dependencies {
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    //人脸注册和人脸管理模块
    implementation project(path: ':registerlibrary')
//    implementation project(path: ':gazelibrary')
//    implementation project(path: ':identifylibrary')
//    implementation project(path: ':drivermonitorlibrary')
//    implementation project(path: ':attendancelibrary')
//    implementation project(path: ':financelibrary')
//    implementation project(path: ':face-sdk-library')
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //noinspection GradleCompatible
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation files('libs/yface.jar')
//    implementation 'androidx.appcompat:appcompat:1.2.0'
    testImplementation 'junit:junit:4.12'
    //noinspection GradleCompatible
    implementation 'com.android.support:recyclerview-v7:28.0.0'
//    implementation 'com.google.code.gson:gson:2.6.2'
    implementation 'me.jessyan:autosize:0.9.5'

//    compile files('libs/orbbec_module-debug.aar')
//    compile files('libs/picozensesdk-release.aar')
//    implementation files('libs/SocketClient.jar')
//    compile 'com.google.code.gson:gson:2.6.2'

    //数据库 mode
    implementation project(':datalibrary')

    //核心算法 module
    implementation project(':facelibrary')

    // OpenCV基础库（*必须）
    implementation 'com.github.jenly1314.WeChatQRCode:opencv:1.2.0'
//    implementation 'com.github.jenly1314.WeChatQRCode:opencv-armv7a:1.2.0'
    implementation 'com.github.jenly1314.WeChatQRCode:opencv-armv64:1.2.0'

    // 微信二维码识别功能
    implementation 'com.github.jenly1314.WeChatQRCode:wechat-qrcode:1.2.0'
}
